Traceback (most recent call last):
  File "C:\Users\vanna\.conda\envs\.env\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\vanna\.conda\envs\.env\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\vanna\.conda\envs\.env\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\vanna\.conda\envs\.env\Lib\asyncio\base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\vanna\.conda\envs\.env\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\vanna\.conda\envs\.env\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\vanna\.conda\envs\.env\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
n = 15
for i in range(n):
    X_train, X_test, y_train, y_test = train_test_split( X, y,
                                      test_size=0.3, random_state=i)
    y_train_std = sc_y.fit_transform(y_train[:, np.newaxis]).flatten()
    train_score_lr = np.append(train_score_lr,
                               np.mean(cross_val_score(pipe_lr,
                               X_train, y_train_std,
                               scoring ='r2' , cv = 10)))
    train_score_knn = np.append(train_score_knn,
                                np.mean(cross_val_score(knn_lr,
                                X_train, y_train_std,
                                scoring ='r2' , cv = 10)))
train_mean_lr = np.mean(train_score_lr)
train_std_lr = np.std(train_score_lr)
train_mean_knn = np.mean(train_score_knn)
train_std_knn = np.std(train_score_knn)
print('R2 train for lr: %.3f +/- %.3f' %
                             (train_mean_lr,train_std_lr))
print('R2 train for knn_lr: %.3f +/- %.3f' %
                             (train_mean_knn,train_std_knn))
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Cell [1;32mIn[61], line 5[0m
[0;32m      2[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m [38;5;28mrange[39m(n):
[0;32m      3[0m     X_train, X_test, y_train, y_test [38;5;241m=[39m train_test_split( X, y,
[0;32m      4[0m                                       test_size[38;5;241m=[39m[38;5;241m0.3[39m, random_state[38;5;241m=[39mi)
[1;32m----> 5[0m     y_train_std [38;5;241m=[39m sc_y[38;5;241m.[39mfit_transform([43my_train[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[43mnp[49m[38;5;241;43m.[39;49m[43mnewaxis[49m[43m][49m)[38;5;241m.[39mflatten()
[0;32m      6[0m     train_score_lr [38;5;241m=[39m np[38;5;241m.[39mappend(train_score_lr,
[0;32m      7[0m                                np[38;5;241m.[39mmean(cross_val_score(pipe_lr,
[0;32m      8[0m                                X_train, y_train_std,
[0;32m      9[0m                                scoring [38;5;241m=[39m[38;5;124m'[39m[38;5;124mr2[39m[38;5;124m'[39m , cv [38;5;241m=[39m [38;5;241m10[39m)))
[0;32m     10[0m     train_score_knn [38;5;241m=[39m np[38;5;241m.[39mappend(train_score_knn,
[0;32m     11[0m                                 np[38;5;241m.[39mmean(cross_val_score(knn_lr,
[0;32m     12[0m                                 X_train, y_train_std,
[0;32m     13[0m                                 scoring [38;5;241m=[39m[38;5;124m'[39m[38;5;124mr2[39m[38;5;124m'[39m , cv [38;5;241m=[39m [38;5;241m10[39m)))

File [1;32m~\.conda\envs\.env\Lib\site-packages\pandas\core\series.py:1072[0m, in [0;36mSeries.__getitem__[1;34m(self, key)[0m
[0;32m   1069[0m     key [38;5;241m=[39m np[38;5;241m.[39masarray(key, dtype[38;5;241m=[39m[38;5;28mbool[39m)
[0;32m   1070[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_get_rows_with_mask(key)
[1;32m-> 1072[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_with[49m[43m([49m[43mkey[49m[43m)[49m

File [1;32m~\.conda\envs\.env\Lib\site-packages\pandas\core\series.py:1082[0m, in [0;36mSeries._get_with[1;34m(self, key)[0m
[0;32m   1077[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(
[0;32m   1078[0m         [38;5;124m"[39m[38;5;124mIndexing a Series with DataFrame is not [39m[38;5;124m"[39m
[0;32m   1079[0m         [38;5;124m"[39m[38;5;124msupported, use the appropriate DataFrame column[39m[38;5;124m"[39m
[0;32m   1080[0m     )
[0;32m   1081[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(key, [38;5;28mtuple[39m):
[1;32m-> 1082[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_values_tuple[49m[43m([49m[43mkey[49m[43m)[49m
[0;32m   1084[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m is_list_like(key):
[0;32m   1085[0m     [38;5;66;03m# e.g. scalars that aren't recognized by lib.is_scalar, GH#32684[39;00m
[0;32m   1086[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mloc[key]

File [1;32m~\.conda\envs\.env\Lib\site-packages\pandas\core\series.py:1122[0m, in [0;36mSeries._get_values_tuple[1;34m(self, key)[0m
[0;32m   1117[0m [38;5;28;01mif[39;00m com[38;5;241m.[39many_none([38;5;241m*[39mkey):
[0;32m   1118[0m     [38;5;66;03m# mpl compat if we look up e.g. ser[:, np.newaxis];[39;00m
[0;32m   1119[0m     [38;5;66;03m#  see tests.series.timeseries.test_mpl_compat_hack[39;00m
[0;32m   1120[0m     [38;5;66;03m# the asarray is needed to avoid returning a 2D DatetimeArray[39;00m
[0;32m   1121[0m     result [38;5;241m=[39m np[38;5;241m.[39masarray([38;5;28mself[39m[38;5;241m.[39m_values[key])
[1;32m-> 1122[0m     [43mdisallow_ndim_indexing[49m[43m([49m[43mresult[49m[43m)[49m
[0;32m   1123[0m     [38;5;28;01mreturn[39;00m result
[0;32m   1125[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m([38;5;28mself[39m[38;5;241m.[39mindex, MultiIndex):

File [1;32m~\.conda\envs\.env\Lib\site-packages\pandas\core\indexers\utils.py:341[0m, in [0;36mdisallow_ndim_indexing[1;34m(result)[0m
[0;32m    333[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[0;32m    334[0m [38;5;124;03mHelper function to disallow multi-dimensional indexing on 1D Series/Index.[39;00m
[0;32m    335[0m 
[1;32m   (...)[0m
[0;32m    338[0m [38;5;124;03min GH#30588.[39;00m
[0;32m    339[0m [38;5;124;03m"""[39;00m
[0;32m    340[0m [38;5;28;01mif[39;00m np[38;5;241m.[39mndim(result) [38;5;241m>[39m [38;5;241m1[39m:
[1;32m--> 341[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    342[0m         [38;5;124m"[39m[38;5;124mMulti-dimensional indexing (e.g. `obj[:, None]`) is no longer [39m[38;5;124m"[39m
[0;32m    343[0m         [38;5;124m"[39m[38;5;124msupported. Convert to a numpy array before indexing instead.[39m[38;5;124m"[39m
[0;32m    344[0m     )

[1;31mValueError[0m: Multi-dimensional indexing (e.g. `obj[:, None]`) is no longer supported. Convert to a numpy array before indexing instead.

